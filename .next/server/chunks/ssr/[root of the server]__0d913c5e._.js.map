{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase/admin.ts"],"sourcesContent":["\nimport admin from 'firebase-admin';\nimport fs from 'fs';\nimport path from 'path';\n\n// --- Initialization State ---\nlet adminAuthInstance: admin.auth.Auth | null = null;\nlet initializationError: Error | null = null;\nlet isInitializedAttempted = false; // Flag to prevent re-attempting initialization logic unnecessarily\nlet initializedVia: string | null = null; // Track how initialization was successful\nlet criticalLogMessages: string[] = []; // Store critical messages for the final error\n\n\n// --- Core Initialization Logic (Run Once) ---\nfunction initializeFirebaseAdmin(): void {\n    // Only attempt initialization once per process lifecycle\n    if (isInitializedAttempted) {\n        // Optional: reduce console noise on subsequent calls\n        // if (adminAuthInstance) { console.log(`Firebase Admin SDK: Already initialized successfully via ${initializedVia}.`); }\n        // else if (initializationError) { console.error(`Firebase Admin SDK: Initialization previously failed: ${initializationError.message}`); }\n        return;\n    }\n    isInitializedAttempted = true; // Mark that we are attempting/have attempted initialization\n\n    console.log(\"Firebase Admin SDK: Starting initialization attempt...\");\n    criticalLogMessages = []; // Reset messages for this attempt\n\n    let serviceAccountJson: string | null = null;\n    let localFilePathChecked: string | null = null;\n    let envVarChecked = false;\n\n    // --- Method 1: Environment Variable ---\n    envVarChecked = true;\n    console.log(\"Firebase Admin SDK: Checking environment variable FIREBASE_SERVICE_ACCOUNT_KEY...\");\n    if (process.env.FIREBASE_SERVICE_ACCOUNT_KEY && process.env.FIREBASE_SERVICE_ACCOUNT_KEY.trim() !== '' && process.env.FIREBASE_SERVICE_ACCOUNT_KEY.trim() !== '{}') {\n        console.log(\"Firebase Admin SDK: FIREBASE_SERVICE_ACCOUNT_KEY environment variable found (non-empty).\");\n        try {\n            serviceAccountJson = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;\n            // Validate JSON structure rigorously\n            const parsed = JSON.parse(serviceAccountJson);\n            if (!parsed || typeof parsed !== 'object' || !parsed.project_id || !parsed.private_key || !parsed.client_email) {\n                const partialJson = serviceAccountJson.substring(0, 100) + (serviceAccountJson.length > 100 ? \"...\" : \"\");\n                console.error(`Firebase Admin SDK: Environment variable JSON content seems invalid or incomplete: ${partialJson}`);\n                const errorMsg = \"CRITICAL - Environment variable JSON is missing required fields (project_id, private_key, client_email).\";\n                criticalLogMessages.push(errorMsg);\n                throw new Error(errorMsg);\n            }\n            initializedVia = 'environment variable';\n            console.log(`Firebase Admin SDK: Found valid JSON in FIREBASE_SERVICE_ACCOUNT_KEY for project ${parsed.project_id}.`);\n        } catch (e: any) {\n            const errorMsg = `CRITICAL - Failed to parse service account JSON from environment variable. Ensure it's valid JSON. Error: ${e.message}`;\n            criticalLogMessages.push(errorMsg);\n            console.error(`Firebase Admin SDK: ${errorMsg}`);\n            initializationError = new Error(errorMsg);\n            // Do NOT proceed if env var is set but invalid\n            return;\n        }\n    } else {\n        console.log(\"Firebase Admin SDK: FIREBASE_SERVICE_ACCOUNT_KEY environment variable not found, empty, or just '{}'.\");\n    }\n\n    // --- Method 2: Local File ---\n    if (!serviceAccountJson) {\n        const serviceAccountFilename = 'reportzen-mixd3-firebase-adminsdk-fbsvc-f006f10e8d.json';\n        const serviceAccountPath = path.resolve(`./${serviceAccountFilename}`); // Get absolute path\n        localFilePathChecked = serviceAccountPath; // Record the path we checked\n        console.log(`Firebase Admin SDK: Checking for local file at ${serviceAccountPath}...`);\n        try {\n            if (fs.existsSync(serviceAccountPath)) {\n                const fileContent = fs.readFileSync(serviceAccountPath, 'utf8');\n                if (fileContent.trim() === '') {\n                    const warnMsg = `WARN - Local file ${serviceAccountFilename} exists but is empty. It will be ignored.`;\n                    console.warn(`Firebase Admin SDK: ${warnMsg}`);\n                    criticalLogMessages.push(warnMsg);\n                } else {\n                    console.log(`Firebase Admin SDK: Found local file ${serviceAccountFilename}. Reading content...`);\n                    serviceAccountJson = fileContent;\n                    // Validate JSON structure rigorously\n                    const parsed = JSON.parse(serviceAccountJson);\n                     if (!parsed || typeof parsed !== 'object' || !parsed.project_id || !parsed.private_key || !parsed.client_email) {\n                         const partialJson = serviceAccountJson.substring(0, 100) + (serviceAccountJson.length > 100 ? \"...\" : \"\");\n                         console.error(`Firebase Admin SDK: Local file JSON content seems invalid or incomplete: ${partialJson}`);\n                         const errorMsg = `CRITICAL - Local file ${serviceAccountFilename} JSON is missing required fields (project_id, private_key, client_email).`;\n                         criticalLogMessages.push(errorMsg);\n                        throw new Error(errorMsg);\n                    }\n                    initializedVia = `local file (${serviceAccountFilename})`;\n                    console.log(`Firebase Admin SDK: Found and read valid JSON from ${serviceAccountFilename} for project ${parsed.project_id}.`);\n                }\n            } else {\n                console.log(`Firebase Admin SDK: Local file ${serviceAccountFilename} not found at ${serviceAccountPath}.`);\n            }\n        } catch (error: any) {\n            let errorMsg;\n            if (error instanceof SyntaxError) {\n                errorMsg = `CRITICAL - Failed to parse service account JSON from ${serviceAccountFilename}. Ensure it's valid JSON. Error: ${error.message}`;\n            } else {\n                errorMsg = `CRITICAL - Error reading local file ${serviceAccountFilename}: ${error.message}`;\n            }\n            criticalLogMessages.push(errorMsg);\n            console.error(`Firebase Admin SDK: ${errorMsg}`);\n            initializationError = new Error(errorMsg);\n             // Do NOT proceed if local file is found but invalid\n            return;\n        }\n    }\n\n    // --- Check if Credentials Were Found ---\n    if (!serviceAccountJson) {\n        let errorMessage = \"CRITICAL - No valid service account credentials found. Cannot initialize.\";\n        if (envVarChecked) errorMessage += \" Checked environment variable 'FIREBASE_SERVICE_ACCOUNT_KEY'\";\n        if (localFilePathChecked) {\n            errorMessage += `${envVarChecked ? ' and' : ' Checked'} local file at '${localFilePathChecked}'`;\n        }\n        errorMessage += \".\";\n        criticalLogMessages.push(errorMessage);\n        console.error(`Firebase Admin SDK: ${errorMessage}`);\n        initializationError = new Error(errorMessage);\n        return; // Stop initialization\n    }\n\n    // --- Initialize Firebase Admin SDK (Only if not already initialized) ---\n    // Check if the default app already exists to avoid re-initialization error\n    if (admin.apps.length === 0) {\n        let serviceAccount;\n        try {\n            // Re-parsing is safe as we validated structure above\n            serviceAccount = JSON.parse(serviceAccountJson);\n            console.log(`Firebase Admin SDK: Attempting initialization via ${initializedVia || 'unknown source'}...`);\n            admin.initializeApp({\n                credential: admin.credential.cert(serviceAccount),\n                // Optionally add databaseURL if using Realtime Database\n                // databaseURL: `https://${serviceAccount.project_id}.firebaseio.com`\n            });\n            console.log(`Firebase Admin SDK: Initialization successful for project ${serviceAccount.project_id} via ${initializedVia}.`);\n            adminAuthInstance = admin.auth(); // Assign instance on success\n            initializationError = null; // Clear any previous errors on success\n            criticalLogMessages = []; // Clear logs on success\n        } catch (error: any) {\n            const errorMsg = `CRITICAL - Error during admin.initializeApp() via ${initializedVia || 'unknown source'}. Error: ${error.message}`;\n            criticalLogMessages.push(errorMsg);\n            console.error(`Firebase Admin SDK: ${errorMsg}`);\n            // Log details useful for debugging initialization failure\n            console.error(\"Service Account Project ID used:\", serviceAccount?.project_id || 'N/A');\n            console.error(\"Service Account Client Email used:\", serviceAccount?.client_email || 'N/A');\n            initializationError = new Error(errorMsg);\n            adminAuthInstance = null; // Ensure instance is null on failure\n        }\n    } else {\n        // If apps array is not empty, assume it's already initialized (by this process or another import)\n        console.log(`Firebase Admin SDK: Default app already exists. Using existing auth instance (initialized via ${initializedVia || 'previous import'}).`);\n        adminAuthInstance = admin.auth(); // Get auth from the existing default app\n        initializationError = null; // Clear potential errors if we're using existing\n        criticalLogMessages = [];\n    }\n}\n\n// --- Run Initialization on Module Load ---\ninitializeFirebaseAdmin();\n\n// --- Export Getter Function (Throws on Access if Initialization Failed) ---\nexport const getAdminAuth = (): admin.auth.Auth => {\n    if (initializationError) {\n        // Provide a more detailed error message upon access if initialization failed\n         throw new Error(`Firebase Admin SDK access failed: ${initializationError.message}. Check server startup logs for details. Common causes are missing, empty, or invalid service account credentials (env var 'FIREBASE_SERVICE_ACCOUNT_KEY' or local file 'reportzen-mixd3-firebase-adminsdk-fbsvc-f006f10e8d.json'). Please verify your setup according to the README.md.`);\n    }\n    if (!adminAuthInstance) {\n        // This case should theoretically not be reached if initialization logic is sound, but added for safety\n        // It might happen if the module somehow gets re-evaluated without re-running the top-level init.\n        console.error(\"Firebase Admin SDK: adminAuthInstance is unexpectedly null despite no recorded initializationError. Re-attempting initialization...\");\n        initializeFirebaseAdmin(); // Attempt recovery\n        if (initializationError) { // Check again after re-attempt\n            throw new Error(`Firebase Admin SDK access failed after re-initialization attempt: ${initializationError.message}. See logs.`);\n        }\n        if(!adminAuthInstance){\n             throw new Error(\"Firebase Admin SDK could not be initialized even after re-attempt. Critical failure. Check server logs.\");\n        }\n        console.warn(\"Firebase Admin SDK: Recovered adminAuthInstance after re-initialization.\");\n    }\n    return adminAuthInstance;\n};\n\n// Export other admin services if needed, ensuring they depend on successful auth init\n// Example for Firestore:\n// let adminDbInstance: admin.firestore.Firestore | null = null;\n// export function getAdminDb(): admin.firestore.Firestore {\n//      getAdminAuth(); // Ensures auth is checked first - will throw if auth failed\n//      if (!adminDbInstance) {\n//          adminDbInstance = admin.firestore();\n//      }\n//      return adminDbInstance;\n// }\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/create-user.ts"],"sourcesContent":["'use server';\n\nimport { getAdminAuth } from '@/lib/firebase/admin'; // Import the getter function\nimport { z } from 'zod';\nimport { headers } from 'next/headers'; // To potentially get user info if needed for auth check\n\n// Define input schema for validation\nconst CreateUserInputSchema = z.object({\n  email: z.string().email({ message: \"Format d'email invalide.\" }),\n  password: z.string().min(6, { message: \"Le mot de passe doit contenir au moins 6 caractères.\" }),\n  isAdmin: z.boolean().optional(), // Optional: flag to set admin custom claim\n});\n\n// Define return type\ninterface CreateUserResult {\n  success: boolean;\n  message: string;\n  userId?: string;\n}\n\nexport async function createUserAction(formData: FormData): Promise<CreateUserResult> {\n   const adminAuth = getAdminAuth(); // Get the admin auth instance via the getter\n\n  // --- Authentication/Authorization Check (Crucial!) ---\n  // This is a basic example. Implement robust checks based on your auth setup.\n  // Option 1: Check session/token if passed via headers (more complex)\n  // Option 2: Assume this action is only callable from a protected admin page\n  //           (simpler, relies on page-level protection)\n  // For this example, we'll assume page-level protection.\n  // In a real app, verify the caller is truly an admin here.\n  // const userToken = headers().get('Authorization')?.split('Bearer ')[1];\n  // if (!userToken) return { success: false, message: \"Non autorisé.\" };\n  // try {\n  //   const decodedToken = await adminAuth.verifyIdToken(userToken);\n  //   if (!decodedToken.admin) { // Assuming you set an 'admin' custom claim\n  //      return { success: false, message: \"Accès refusé.\" };\n  //   }\n  // } catch (error) {\n  //    console.error(\"Auth check failed:\", error);\n  //    return { success: false, message: \"Erreur d'authentification.\" };\n  // }\n  // --- End Auth Check ---\n\n\n  const rawData = {\n    email: formData.get('email'),\n    password: formData.get('password'),\n    isAdmin: formData.get('isAdmin') === 'on', // Checkbox value is 'on' or null\n  };\n\n  // Validate input data\n  const validationResult = CreateUserInputSchema.safeParse(rawData);\n\n  if (!validationResult.success) {\n    // Combine error messages\n    const errorMessages = validationResult.error.errors.map(e => e.message).join(', ');\n    return { success: false, message: `Validation échouée: ${errorMessages}` };\n  }\n\n  const { email, password, isAdmin } = validationResult.data;\n\n  try {\n    const userRecord = await adminAuth.createUser({\n      email: email,\n      password: password,\n      emailVerified: false, // Optional: set email verification status\n      disabled: false, // Optional: enable/disable user\n    });\n\n    let claimMessage = '';\n    // Optionally set custom claims (like admin role)\n    if (isAdmin) {\n      await adminAuth.setCustomUserClaims(userRecord.uid, { admin: true });\n      claimMessage = \" Rôle admin défini.\";\n       // Note: If using NEXT_PUBLIC_ADMIN_UID method in useAuth.tsx (as currently configured),\n       // this custom claim might not be checked by default for identifying admins.\n       // Ensure your useAuth.tsx logic aligns with how you define admins (claim vs env var).\n       // The checkbox in create-user page is currently commented out to align with the primary NEXT_PUBLIC_ADMIN_UID method.\n    }\n\n\n    console.log('Successfully created new user:', userRecord.uid);\n    return {\n      success: true,\n      message: `User ${email} créé avec succès.${claimMessage}`,\n      userId: userRecord.uid,\n    };\n  } catch (error: any) {\n    console.error('Error creating new user:', error);\n    let errorMessage = \"Erreur lors de la création de l'utilisateur.\";\n    if (error.code === 'auth/email-already-exists') {\n      errorMessage = `L'email ${email} existe déjà.`;\n    } else if (error.code === 'auth/invalid-password') {\n       errorMessage = \"Le mot de passe est invalide (doit comporter au moins 6 caractères).\"; // Firebase might enforce this anyway\n    }\n    // Add more specific error handling as needed\n    return { success: false, message: errorMessage };\n  }\n}"],"names":[],"mappings":";;;;;AAEA,6NAAqD,6BAA6B;AAClF;;;;;;AAGA,qCAAqC;AACrC,MAAM,wBAAwB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAA2B;IAC9D,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAuD;IAC9F,SAAS,oIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;AAC/B;AASO,eAAe,uCAAc,GAAd,iBAAiB,QAAkB;IACtD,MAAM,YAAY,CAAA,GAAA,+HAAA,CAAA,eAAY,AAAD,KAAK,6CAA6C;IAEhF,wDAAwD;IACxD,6EAA6E;IAC7E,qEAAqE;IACrE,4EAA4E;IAC5E,uDAAuD;IACvD,wDAAwD;IACxD,2DAA2D;IAC3D,yEAAyE;IACzE,uEAAuE;IACvE,QAAQ;IACR,mEAAmE;IACnE,2EAA2E;IAC3E,4DAA4D;IAC5D,MAAM;IACN,oBAAoB;IACpB,iDAAiD;IACjD,uEAAuE;IACvE,IAAI;IACJ,yBAAyB;IAGzB,MAAM,UAAU;QACd,OAAO,SAAS,GAAG,CAAC;QACpB,UAAU,SAAS,GAAG,CAAC;QACvB,SAAS,SAAS,GAAG,CAAC,eAAe;IACvC;IAEA,sBAAsB;IACtB,MAAM,mBAAmB,sBAAsB,SAAS,CAAC;IAEzD,IAAI,CAAC,iBAAiB,OAAO,EAAE;QAC7B,yBAAyB;QACzB,MAAM,gBAAgB,iBAAiB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,OAAO,EAAE,IAAI,CAAC;QAC7E,OAAO;YAAE,SAAS;YAAO,SAAS,CAAC,oBAAoB,EAAE,eAAe;QAAC;IAC3E;IAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,iBAAiB,IAAI;IAE1D,IAAI;QACF,MAAM,aAAa,MAAM,UAAU,UAAU,CAAC;YAC5C,OAAO;YACP,UAAU;YACV,eAAe;YACf,UAAU;QACZ;QAEA,IAAI,eAAe;QACnB,iDAAiD;QACjD,IAAI,SAAS;YACX,MAAM,UAAU,mBAAmB,CAAC,WAAW,GAAG,EAAE;gBAAE,OAAO;YAAK;YAClE,eAAe;QACd,wFAAwF;QACxF,4EAA4E;QAC5E,sFAAsF;QACtF,sHAAsH;QACzH;QAGA,QAAQ,GAAG,CAAC,kCAAkC,WAAW,GAAG;QAC5D,OAAO;YACL,SAAS;YACT,SAAS,CAAC,KAAK,EAAE,MAAM,kBAAkB,EAAE,cAAc;YACzD,QAAQ,WAAW,GAAG;QACxB;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,IAAI,eAAe;QACnB,IAAI,MAAM,IAAI,KAAK,6BAA6B;YAC9C,eAAe,CAAC,QAAQ,EAAE,MAAM,aAAa,CAAC;QAChD,OAAO,IAAI,MAAM,IAAI,KAAK,yBAAyB;YAChD,eAAe,wEAAwE,qCAAqC;QAC/H;QACA,6CAA6C;QAC7C,OAAO;YAAE,SAAS;YAAO,SAAS;QAAa;IACjD;AACF;;;IA9EsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/create-user/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/create-user/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/create-user/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/create-user/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/create-user/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/create-user/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}