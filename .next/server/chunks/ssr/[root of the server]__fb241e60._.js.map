{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase/admin.ts"],"sourcesContent":["\nimport admin from 'firebase-admin';\n// import path from 'path'; // Keep commented unless switching to process.cwd()\n\n// This is the service account key that is created from the Firebase Console\nconst serviceAccount = {\n  \"type\": \"service_account\",\n  \"project_id\": \"reportzen-mixd3\",\n  \"private_key_id\": \"f006f10e8d58e68ee55acf58745bfab3cf123c05\",\n  \"private_key\": `-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDABEksqxz3OP7J\nHRM0uk1jvzov9AcImZdk1+GLnn8ZSQgR4lrlLYhVD9Jn39cND2JVhFqtk3uCaQH+\ntJlLxwgDKdJIIt82HF4Nw7PKSPd2xSqGek8yIFAFqwsiq4XnB2wTZ9f97hiYN0hq\nZTl3gTSCF/mvRJmlm3IBYCI4KXQCCCp9BiPhPbx5x+EZb7WnRslsgwNP2awtrMSK\nUiqQcN4MCPoD6hxPQzk+MZcEVKuS/MkQS7O0nnN3TIqmpMbKIgBCrnhZI81cOjam\nDtfiF8NzdFhcwttlK3REKGnNM9dK+I13LsJlhkd+rmPBPltcDebjjcc7gQCcmNme\n8J3B0Ai5AgMBAAECggEACfuPDwFHDGahqbSsbXGBbtNKbqN0rtKcB37zt7hXP5TH\nlHUcqE0xiR6Sn++ICiKdHaNiZXjFPeFAscxo1dg0nJl9gwjmat/sVzHany8jnRX2\nC9oVqPOmGrgAPbQGI53ZVWRGMJTtdr2/suGtVv8Cyv/9F/VsjtVh3BwdMKdIY9yQ\nEIlONolw+dVTKYiFPJbdsAPGJmz03dnjzd70FSyfMqKQ3ffEd1GQnTYLKdEO6N0P\nJ5HiEduOEcMh0G8Ry1X2oA3iq4Cvr1/9TN1u3TIyxFo6UKFjuB6k4Ncgyd86Tod2\nB+OoeMnO0JK+2q+ci6I9Z1xc6h3QV8Jc2FbPzuo1CQKBgQDql8Jw92GmFkcZB2Mh\nhame5OTuO+S+oYZoVQykEUa/e32b1mhi/ySy11RffpWA10EqgZsLZ12X61gbiXmq\njPurjXoHLVuUTGZjPG38Bcf5jp5SIcTfKi16rs3nONbiPisCbyA16c24xGLFuMMF\njlePJSYtS3jrcpybjHRG93bCtQKBgQDRievyVwU19m72UI+VIyvqb3bZXhuTaVrx\ni7vEeWBQfEzxRBZiiYh75k67O78WWjWDYth01AZlG+Micgr/aAhq0ktKooHk7iQY\nX4SAv7Fa7VbbZrStNkTQyS8o2t1AJ2fnrC06I3crTpimQMxweIl4q7NuH1zJ7C7p\n568h2lBcdQKBgQDLFtaeNYuz3VVvtZV8T9qoVEBcfj1pSyyw5fArmUlGPAJiBxwX\nmAqNSR0iDtQe1jr0MX+oP7Qm8Pc1364UmDjIK5KY5AuENx/siUQuClM1GOK298UX\n7cuxieN3aR2ef3N8h/e6tM4ERv+7bFhpVvE2W1LRo6TrMC2j+9QuG84UgQKBgQC5\n/1Gftjr74ZoxruUlHylWWkcHQA/+VCDUFJNCHfOuvgeWijfMlATA5niwnqJKdxzV\nWaKGYcajbZO6+bxlZrVCDRWkVIg07GbB89esaXxHGDJnYs2yi1+ebVcdTtninpgO\n/7jNyLl5ibTart5KX9S3dsI5WEGHQ82I941v4VhAGQKBgGdubhBFJ8skoqokR6DL\nFGODcmN6nP9OzrGXcC6g9CTUOP24r1YKHVvnjEdMAIMjFvH6HtJq4BI5zFVR2wSA\nzdGVgeYv1jAUDTQ2OVcQYeDYt6kmfTqDW/suyBW2AjXY6davU5kfzyypK8z0CUKy\nU3O5ru5Rb6zH/gYSsvhXFL9S\n-----END PRIVATE KEY-----`,\n  \"client_email\": \"firebase-adminsdk-fbsvc@reportzen-mixd3.iam.gserviceaccount.com\",\n  \"client_id\": \"106260250081518764874\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40reportzen-mixd3.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n};\n// Function to initialize Firebase Admin SDK\nconst initializeFirebaseAdmin = (): admin.auth.Auth | null => {\n  // Check if the SDK is already initialized to prevent re-initialization errors\n  if (admin.apps.length > 0) {\n    // console.log(\"Firebase Admin SDK already initialized.\"); // Reduce console noise\n    return admin.auth(); // Return existing auth instance\n  }\n\n  console.log(\"Attempting to initialize Firebase Admin SDK...\");\n  try {\n    admin.initializeApp({\n      credential: admin.credential.cert(serviceAccount),\n    });\n    console.log('firebase admin Initialized');\n  } catch (error: any) {\n    // Catch potential errors during the admin.initializeApp call itself (less common)\n    console.error(`Unexpected error during Firebase Admin SDK initialization: ${error.message}`);\n  }\n\n  // --- Check Initialization Status ---\n  if (admin.apps.length > 0) {\n      console.log(`Firebase Admin SDK initialization confirmed (via ${initializedVia || 'unknown'}).`);\n      return admin.auth();\n  }\n\n  // --- Initialization Failed ---\n  // If neither the environment variable nor the local file worked\n  console.error('CRITICAL: Firebase Admin SDK initialization failed after trying all methods.');\n\n  return null; // Indicate failure\n};\n\n// Initialize and attempt to get the adminAuth instance\nconst adminAuthInstance = initializeFirebaseAdmin();\n\n// Export the instance only if initialization was successful.\n// Throwing an error makes the initialization failure immediate and clear during server startup/request.\nif (!adminAuthInstance) {\n  // Ensure this error message clearly indicates the user needs to check configuration.\n  throw new Error('Firebase Admin SDK could not be initialized. Check server logs for detailed errors and setup instructions in README.md.');\n}\n\nexport const adminAuth = adminAuthInstance;\n// Export other admin services if needed, e.g., admin.firestore()\n"],"names":[],"mappings":";;;AACA;;AACA,+EAA+E;AAE/E,4EAA4E;AAC5E,MAAM,iBAAiB;IACrB,QAAQ;IACR,cAAc;IACd,kBAAkB;IAClB,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;yBA2BO,CAAC;IACxB,gBAAgB;IAChB,aAAa;IACb,YAAY;IACZ,aAAa;IACb,+BAA+B;IAC/B,wBAAwB;IACxB,mBAAmB;AACrB;AACA,4CAA4C;AAC5C,MAAM,0BAA0B;IAC9B,8EAA8E;IAC9E,IAAI,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;QACzB,kFAAkF;QAClF,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI,IAAI,gCAAgC;IACvD;IAEA,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YAClB,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;QACpC;QACA,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAY;QACnB,kFAAkF;QAClF,QAAQ,KAAK,CAAC,CAAC,2DAA2D,EAAE,MAAM,OAAO,EAAE;IAC7F;IAEA,sCAAsC;IACtC,IAAI,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;QACvB,QAAQ,GAAG,CAAC,CAAC,iDAAiD,EAAE,kBAAkB,UAAU,EAAE,CAAC;QAC/F,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI;IACrB;IAEA,gCAAgC;IAChC,gEAAgE;IAChE,QAAQ,KAAK,CAAC;IAEd,OAAO,MAAM,mBAAmB;AAClC;AAEA,uDAAuD;AACvD,MAAM,oBAAoB;AAE1B,6DAA6D;AAC7D,wGAAwG;AACxG,IAAI,CAAC,mBAAmB;IACtB,qFAAqF;IACrF,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,YAAY,mBACzB,iEAAiE","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/actions/create-user.ts"],"sourcesContent":["\n'use server';\n\nimport { adminAuth } from '@/lib/firebase/admin';\nimport { z } from 'zod';\nimport { headers } from 'next/headers'; // To potentially get user info if needed for auth check\n\n// Define input schema for validation\nconst CreateUserInputSchema = z.object({\n  email: z.string().email({ message: \"Format d'email invalide.\" }),\n  password: z.string().min(6, { message: \"Le mot de passe doit contenir au moins 6 caractères.\" }),\n  isAdmin: z.boolean().optional(), // Optional: flag to set admin custom claim\n});\n\n// Define return type\ninterface CreateUserResult {\n  success: boolean;\n  message: string;\n  userId?: string;\n}\n\nexport async function createUserAction(formData: FormData): Promise<CreateUserResult> {\n  // --- Authentication/Authorization Check (Crucial!) ---\n  // This is a basic example. Implement robust checks based on your auth setup.\n  // Option 1: Check session/token if passed via headers (more complex)\n  // Option 2: Assume this action is only callable from a protected admin page\n  //           (simpler, relies on page-level protection)\n  // For this example, we'll assume page-level protection.\n  // In a real app, verify the caller is truly an admin here.\n  // const userToken = headers().get('Authorization')?.split('Bearer ')[1];\n  // if (!userToken) return { success: false, message: \"Non autorisé.\" };\n  // try {\n  //   const decodedToken = await adminAuth.verifyIdToken(userToken);\n  //   if (!decodedToken.admin) { // Assuming you set an 'admin' custom claim\n  //      return { success: false, message: \"Accès refusé.\" };\n  //   }\n  // } catch (error) {\n  //    console.error(\"Auth check failed:\", error);\n  //    return { success: false, message: \"Erreur d'authentification.\" };\n  // }\n  // --- End Auth Check ---\n\n\n  const rawData = {\n    email: formData.get('email'),\n    password: formData.get('password'),\n    isAdmin: formData.get('isAdmin') === 'on', // Checkbox value is 'on' or null\n  };\n\n  // Validate input data\n  const validationResult = CreateUserInputSchema.safeParse(rawData);\n\n  if (!validationResult.success) {\n    // Combine error messages\n    const errorMessages = validationResult.error.errors.map(e => e.message).join(', ');\n    return { success: false, message: `Validation échouée: ${errorMessages}` };\n  }\n\n  const { email, password, isAdmin } = validationResult.data;\n\n  try {\n    const userRecord = await adminAuth.createUser({\n      email: email,\n      password: password,\n      emailVerified: false, // Optional: set email verification status\n      disabled: false, // Optional: enable/disable user\n    });\n\n    let claimMessage = '';\n    // Optionally set custom claims (like admin role)\n    if (isAdmin) {\n      await adminAuth.setCustomUserClaims(userRecord.uid, { admin: true });\n      claimMessage = \" Rôle admin défini.\";\n       // Note: If using NEXT_PUBLIC_ADMIN_UID method in useAuth.tsx (as currently configured),\n       // this custom claim might not be checked by default for identifying admins.\n       // Ensure your useAuth.tsx logic aligns with how you define admins (claim vs env var).\n       // The checkbox in create-user page is currently commented out to align with the primary NEXT_PUBLIC_ADMIN_UID method.\n    }\n\n\n    console.log('Successfully created new user:', userRecord.uid);\n    return {\n      success: true,\n      message: `Utilisateur ${email} créé avec succès.${claimMessage}`,\n      userId: userRecord.uid,\n    };\n  } catch (error: any) {\n    console.error('Error creating new user:', error);\n    let errorMessage = \"Erreur lors de la création de l'utilisateur.\";\n    if (error.code === 'auth/email-already-exists') {\n      errorMessage = `L'email ${email} existe déjà.`;\n    } else if (error.code === 'auth/invalid-password') {\n       errorMessage = \"Le mot de passe est invalide (doit comporter au moins 6 caractères).\"; // Firebase might enforce this anyway\n    }\n    // Add more specific error handling as needed\n    return { success: false, message: errorMessage };\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;;;;;;AAGA,qCAAqC;AACrC,MAAM,wBAAwB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAE,SAAS;IAA2B;IAC9D,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAuD;IAC9F,SAAS,oIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ;AAC/B;AASO,eAAe,uCAAc,GAAd,iBAAiB,QAAkB;IACvD,wDAAwD;IACxD,6EAA6E;IAC7E,qEAAqE;IACrE,4EAA4E;IAC5E,uDAAuD;IACvD,wDAAwD;IACxD,2DAA2D;IAC3D,yEAAyE;IACzE,uEAAuE;IACvE,QAAQ;IACR,mEAAmE;IACnE,2EAA2E;IAC3E,4DAA4D;IAC5D,MAAM;IACN,oBAAoB;IACpB,iDAAiD;IACjD,uEAAuE;IACvE,IAAI;IACJ,yBAAyB;IAGzB,MAAM,UAAU;QACd,OAAO,SAAS,GAAG,CAAC;QACpB,UAAU,SAAS,GAAG,CAAC;QACvB,SAAS,SAAS,GAAG,CAAC,eAAe;IACvC;IAEA,sBAAsB;IACtB,MAAM,mBAAmB,sBAAsB,SAAS,CAAC;IAEzD,IAAI,CAAC,iBAAiB,OAAO,EAAE;QAC7B,yBAAyB;QACzB,MAAM,gBAAgB,iBAAiB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA,IAAK,EAAE,OAAO,EAAE,IAAI,CAAC;QAC7E,OAAO;YAAE,SAAS;YAAO,SAAS,CAAC,oBAAoB,EAAE,eAAe;QAAC;IAC3E;IAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,iBAAiB,IAAI;IAE1D,IAAI;QACF,MAAM,aAAa,MAAM,+HAAA,CAAA,YAAS,CAAC,UAAU,CAAC;YAC5C,OAAO;YACP,UAAU;YACV,eAAe;YACf,UAAU;QACZ;QAEA,IAAI,eAAe;QACnB,iDAAiD;QACjD,IAAI,SAAS;YACX,MAAM,+HAAA,CAAA,YAAS,CAAC,mBAAmB,CAAC,WAAW,GAAG,EAAE;gBAAE,OAAO;YAAK;YAClE,eAAe;QACd,wFAAwF;QACxF,4EAA4E;QAC5E,sFAAsF;QACtF,sHAAsH;QACzH;QAGA,QAAQ,GAAG,CAAC,kCAAkC,WAAW,GAAG;QAC5D,OAAO;YACL,SAAS;YACT,SAAS,CAAC,YAAY,EAAE,MAAM,kBAAkB,EAAE,cAAc;YAChE,QAAQ,WAAW,GAAG;QACxB;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,IAAI,eAAe;QACnB,IAAI,MAAM,IAAI,KAAK,6BAA6B;YAC9C,eAAe,CAAC,QAAQ,EAAE,MAAM,aAAa,CAAC;QAChD,OAAO,IAAI,MAAM,IAAI,KAAK,yBAAyB;YAChD,eAAe,wEAAwE,qCAAqC;QAC/H;QACA,6CAA6C;QAC7C,OAAO;YAAE,SAAS;YAAO,SAAS;QAAa;IACjD;AACF;;;IA5EsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 270, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/create-user/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/create-user/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/create-user/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/create-user/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/admin/create-user/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/admin/create-user/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}