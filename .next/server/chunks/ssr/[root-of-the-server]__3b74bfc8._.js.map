{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase/config.ts"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// IMPORTANT: Ensure these environment variables are correctly set in your .env file\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID\n};\n\n// Initialize Firebase only if it hasn't been initialized yet\nlet app;\nif (!getApps().length) {\n  // Validate essential config values before initializing\n  if (!firebaseConfig.apiKey) {\n    console.error(\"Firebase API Key is missing. Please check your .env file and ensure NEXT_PUBLIC_FIREBASE_API_KEY is set.\");\n  }\n  if (!firebaseConfig.projectId) {\n     console.error(\"Firebase Project ID is missing. Please check your .env file and ensure NEXT_PUBLIC_FIREBASE_PROJECT_ID is set.\");\n  }\n  // Add more checks as needed\n\n  try {\n     app = initializeApp(firebaseConfig);\n  } catch (error) {\n     console.error(\"Error initializing Firebase:\", error);\n     // Handle initialization error (e.g., show a message to the user)\n  }\n\n} else {\n  app = getApp();\n}\n\n// Initialize Firebase Authentication and get a reference to the service\n// Ensure 'app' is defined before calling getAuth\nconst auth = app ? getAuth(app) : null;\n\n// Check if auth initialization failed\nif (!auth && app) {\n  console.error(\"Firebase Authentication could not be initialized. Check Firebase config and initialization.\");\n}\n\nexport { app, auth };\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;;AACvD;AAAA;AACA;AAAA;;;AACA,4DAA4D;AAC5D,iEAAiE;AAEjE,wCAAwC;AACxC,mEAAmE;AACnE,oFAAoF;AACpF,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;AACf;AAEA,6DAA6D;AAC7D,IAAI;AACJ,IAAI,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,uDAAuD;IACvD,IAAI,CAAC,eAAe,MAAM,EAAE;QAC1B,QAAQ,KAAK,CAAC;IAChB;IACA,IAAI,CAAC,eAAe,SAAS,EAAE;QAC5B,QAAQ,KAAK,CAAC;IACjB;IACA,4BAA4B;IAE5B,IAAI;QACD,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;IACvB,EAAE,OAAO,OAAO;QACb,QAAQ,KAAK,CAAC,gCAAgC;IAC9C,iEAAiE;IACpE;AAEF,OAAO;IACL,MAAM,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACb;AAEA,wEAAwE;AACxE,iDAAiD;AACjD,MAAM,OAAO,MAAM,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE,OAAO;AAElC,sCAAsC;AACtC,IAAI,CAAC,QAAQ,KAAK;IAChB,QAAQ,KAAK,CAAC;AAChB","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/hooks/useAuth.tsx"],"sourcesContent":["\n\n\"use client\"; // Ensure this is a client component\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode, // Import ReactNode for children prop type\n} from 'react';\nimport {\n  onAuthStateChanged,\n  signOut,\n  User as FirebaseUser, // Rename Firebase User type\n} from 'firebase/auth';\nimport { auth } from '@/lib/firebase/config'; // Adjust path as necessary\n\n// Define a User type for your application, potentially extending FirebaseUser\n// Add custom properties like 'role' here\ninterface User extends FirebaseUser {\n  role?: 'admin' | 'user'; // Example: Add a role property\n}\n\n// Define the context type\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  logout: () => Promise<void>;\n}\n\n// Create the context with a default value\n// The default value is used when a component tries to access the context outside of a provider\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  loading: true,\n  logout: async () => {}, // Default logout does nothing\n});\n\n// Define the provider props type\ninterface AuthProviderProps {\n  children: ReactNode; // Type for children prop\n}\n\n// Create the AuthProvider component\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Subscribe to Firebase auth state changes\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        // User is signed in\n        // TODO: Fetch additional user data (like role) from your backend/database if needed\n        // Example: const userRole = await fetchUserRole(firebaseUser.uid);\n\n        // Simulate fetching user role (replace with actual logic)\n        // In a real app, you would fetch this from Firestore or your database\n        const getUserRole = async (uid: string): Promise<'admin' | 'user'> => {\n          // Example: check if UID matches a known admin UID\n          // Replace with your actual role management logic\n          if (uid === process.env.NEXT_PUBLIC_ADMIN_UID) { // Example check\n            return 'admin';\n          }\n          return 'user'; // Default role\n        };\n\n        const userRole = await getUserRole(firebaseUser.uid);\n\n        const appUser: User = {\n          ...firebaseUser,\n          // Use the fetched role\n          role: userRole,\n        };\n        setUser(appUser);\n      } else {\n        // User is signed out\n        setUser(null);\n      }\n      setLoading(false); // Set loading to false once auth state is determined\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // Logout function\n  const logout = async () => {\n    setLoading(true); // Optionally set loading state during logout\n    try {\n      await signOut(auth);\n      setUser(null); // Clear user state immediately\n    } catch (error) {\n      console.error(\"Error signing out: \", error);\n      // Handle logout errors if necessary\n    } finally {\n      setLoading(false); // Ensure loading is false after attempt\n    }\n  };\n\n  // Value object passed to the provider\n  const value: AuthContextType = { user, loading, logout };\n\n  // Correcting the return statement to ensure proper JSX syntax\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n\n// Custom hook to use the auth context\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    // Ensure the hook is used within an AuthProvider\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"names":[],"mappings":";;;;;AAIA;AAOA;AAAA;AAAA;AAKA,+NAA8C,2BAA2B;AAdzE,cAAc,oCAAoC;;;;;AA6BlD,0CAA0C;AAC1C,+FAA+F;AAC/F,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAmB;IACjD,MAAM;IACN,SAAS;IACT,QAAQ,WAAa;AACvB;AAQO,MAAM,eAA4C,CAAC,EAAE,QAAQ,EAAE;IACpE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,2CAA2C;QAC3C,MAAM,cAAc,CAAA,GAAA,oPAAA,CAAA,qBAAkB,AAAD,EAAE,gIAAA,CAAA,OAAI,EAAE,OAAO;YAClD,IAAI,cAAc;gBAChB,oBAAoB;gBACpB,oFAAoF;gBACpF,mEAAmE;gBAEnE,0DAA0D;gBAC1D,sEAAsE;gBACtE,MAAM,cAAc,OAAO;oBACzB,kDAAkD;oBAClD,iDAAiD;oBACjD,IAAI,yEAA2C;wBAC7C,OAAO;oBACT;oBACA,OAAO,QAAQ,eAAe;gBAChC;gBAEA,MAAM,WAAW,MAAM,YAAY,aAAa,GAAG;gBAEnD,MAAM,UAAgB;oBACpB,GAAG,YAAY;oBACf,uBAAuB;oBACvB,MAAM;gBACR;gBACA,QAAQ;YACV,OAAO;gBACL,qBAAqB;gBACrB,QAAQ;YACV;YACA,WAAW,QAAQ,qDAAqD;QAC1E;QAEA,kCAAkC;QAClC,OAAO,IAAM;IACf,GAAG,EAAE,GAAG,8DAA8D;IAEtE,kBAAkB;IAClB,MAAM,SAAS;QACb,WAAW,OAAO,6CAA6C;QAC/D,IAAI;YACF,MAAM,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE,gIAAA,CAAA,OAAI;YAClB,QAAQ,OAAO,+BAA+B;QAChD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,oCAAoC;QACtC,SAAU;YACR,WAAW,QAAQ,wCAAwC;QAC7D;IACF;IAEA,sCAAsC;IACtC,MAAM,QAAyB;QAAE;QAAM;QAAS;IAAO;IAEvD,8DAA8D;IAC9D,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAC1B;;;;;;AAGP;AAIO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,iDAAiD;QACjD,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}}]
}