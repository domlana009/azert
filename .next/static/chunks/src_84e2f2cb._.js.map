{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase/config.ts"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n// IMPORTANT: Ensure these environment variables are correctly set in your .env file\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n  dynamicLinksApiKey: process.env.NEXT_PUBLIC_FIREBASE_DYNAMIC_LINKS_API_KEY // Added dynamic links API key\n};\n\n// Initialize Firebase only if it hasn't been initialized yet\nlet app;\nlet auth: ReturnType<typeof getAuth> | null = null; // Initialize auth to null\n\n// Function to check if API key is potentially valid (basic check)\nfunction isApiKeyPotentiallyValid(apiKey?: string): boolean {\n  // Basic check: Not empty and doesn't look like a placeholder\n  return !!apiKey && !apiKey.startsWith(\"YOUR_\") && apiKey.length > 10;\n}\n\nif (!getApps().length) {\n  // Validate essential config values before initializing\n  if (!isApiKeyPotentiallyValid(firebaseConfig.apiKey)) {\n    console.error(`Firebase API Key is missing or invalid: '${firebaseConfig.apiKey}'. Please check your .env file (and compare with .env.example) and ensure NEXT_PUBLIC_FIREBASE_API_KEY is set correctly.`);\n    // You might want to throw an error here or handle it differently depending on your app's needs\n  } else if (!firebaseConfig.projectId) {\n     console.error(\"Firebase Project ID is missing. Please check your .env file (and compare with .env.example) and ensure NEXT_PUBLIC_FIREBASE_PROJECT_ID is set.\");\n     // Throw or handle error\n  } else {\n      // Only initialize if essential config seems present and valid\n      try {\n         app = initializeApp(firebaseConfig);\n         // Initialize Firebase Authentication and get a reference to the service only after successful app initialization\n         auth = getAuth(app);\n         console.log(\"Firebase initialized successfully.\"); // Log success\n      } catch (error: any) { // Catch specific error type if possible\n         console.error(\"Error initializing Firebase:\", error.message || error);\n         // Handle initialization error (e.g., show a message to the user)\n         // You might want to set a global error state here\n      }\n  }\n\n} else {\n  app = getApp();\n   // Ensure auth is initialized if the app already exists\n  try {\n    auth = getAuth(app);\n     console.log(\"Firebase app already initialized.\"); // Log info\n  } catch (error: any) {\n     console.error(\"Error getting Firebase Auth for existing app:\", error.message || error);\n  }\n}\n\n\n// Check if auth initialization failed after trying\nif (!auth) { // Only log if auth is still null after attempts\n  console.error(\"Firebase Authentication could not be initialized. This is often due to missing or invalid configuration in your .env file (e.g., NEXT_PUBLIC_FIREBASE_API_KEY). Please verify your Firebase project settings and ensure your .env file is correctly set up (compare with .env.example).\");\n}\n\n// Export auth, which might be null if initialization failed\nexport { app, auth };\n"],"names":[],"mappings":"AAAA,uDAAuD;;;;;AAU7C;AATV;AAAA;AACA;AAAA;;;AACA,4DAA4D;AAC5D,iEAAiE;AAEjE,wCAAwC;AACxC,mEAAmE;AACnE,oFAAoF;AACpF,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;IACb,kBAAkB;AACpB;AAEA,6DAA6D;AAC7D,IAAI;AACJ,IAAI,OAA0C,MAAM,0BAA0B;AAE9E,kEAAkE;AAClE,SAAS,yBAAyB,MAAe;IAC/C,6DAA6D;IAC7D,OAAO,CAAC,CAAC,UAAU,CAAC,OAAO,UAAU,CAAC,YAAY,OAAO,MAAM,GAAG;AACpE;AAEA,IAAI,CAAC,CAAA,GAAA,uLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,uDAAuD;IACvD,IAAI,CAAC,yBAAyB,eAAe,MAAM,GAAG;QACpD,QAAQ,KAAK,CAAC,CAAC,yCAAyC,EAAE,eAAe,MAAM,CAAC,wHAAwH,CAAC;IACzM,+FAA+F;IACjG,OAAO,IAAI,CAAC,eAAe,SAAS,EAAE;QACnC,QAAQ,KAAK,CAAC;IACd,wBAAwB;IAC3B,OAAO;QACH,8DAA8D;QAC9D,IAAI;YACD,MAAM,CAAA,GAAA,uLAAA,CAAA,gBAAa,AAAD,EAAE;YACpB,iHAAiH;YACjH,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;YACf,QAAQ,GAAG,CAAC,uCAAuC,cAAc;QACpE,EAAE,OAAO,OAAY;YAClB,QAAQ,KAAK,CAAC,gCAAgC,MAAM,OAAO,IAAI;QAC/D,iEAAiE;QACjE,kDAAkD;QACrD;IACJ;AAEF,OAAO;IACL,MAAM,CAAA,GAAA,uLAAA,CAAA,SAAM,AAAD;IACV,uDAAuD;IACxD,IAAI;QACF,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;QACd,QAAQ,GAAG,CAAC,sCAAsC,WAAW;IAChE,EAAE,OAAO,OAAY;QAClB,QAAQ,KAAK,CAAC,iDAAiD,MAAM,OAAO,IAAI;IACnF;AACF;AAGA,mDAAmD;AACnD,IAAI,CAAC,MAAM;IACT,QAAQ,KAAK,CAAC;AAChB","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/hooks/useAuth.tsx"],"sourcesContent":["\n\"use client\"; // Ensure this is a client component\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode, // Import ReactNode for children prop type\n} from 'react';\nimport {\n  onAuthStateChanged,\n  signOut,\n  User as FirebaseUser, // Rename Firebase User type\n  getIdTokenResult, // Import getIdTokenResult\n} from 'firebase/auth';\nimport { auth } from '@/lib/firebase/config'; // Adjust path as necessary\n\n// Define a User type for your application, potentially extending FirebaseUser\n// Add custom properties like 'role' and 'allowedSections' here\ninterface User extends FirebaseUser {\n  role?: 'admin' | 'user'; // Example: Add a role property\n  allowedSections?: string[]; // Add allowed sections property\n}\n\n// Define the context type\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  logout: () => Promise<void>;\n  // allowedSections?: string[]; // Add allowedSections to context type (optional, could also just be on user object)\n}\n\n// Create the context with a default value\n// The default value is used when a component tries to access the context outside of a provider\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  loading: true,\n  logout: async () => {}, // Default logout does nothing\n});\n\n// Define the provider props type\ninterface AuthProviderProps {\n  children: ReactNode; // Type for children prop\n}\n\n// Create the AuthProvider component\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if auth object is available before subscribing\n    if (!auth) {\n      console.error(\"Firebase auth object is not available. Authentication cannot be initialized. Check Firebase config.\");\n      setLoading(false); // Stop loading as auth state cannot be determined\n      return; // Exit useEffect early\n    }\n\n    // Subscribe to Firebase auth state changes\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      if (firebaseUser) {\n        // User is signed in\n        try {\n            // Force refresh the token to get the latest custom claims\n            const idTokenResult = await firebaseUser.getIdTokenResult(true);\n            const claims = idTokenResult.claims;\n\n            // Determine Role\n            let userRole: 'admin' | 'user' = 'user'; // Default to user\n            // Priority 1: Check Environment Variable for Admin UID\n             if (process.env.NEXT_PUBLIC_ADMIN_UID && firebaseUser.uid === process.env.NEXT_PUBLIC_ADMIN_UID) {\n                userRole = 'admin';\n            }\n            // Priority 2: Check Custom Claim (if env var not set or doesn't match)\n            else if (claims.admin === true) {\n                 userRole = 'admin';\n            }\n\n            // Determine Allowed Sections\n            // Default to all sections for admin, otherwise read from claims or default to empty\n            let allowedSections: string[];\n            if (userRole === 'admin') {\n                allowedSections = ['daily-report', 'activity-report', 'r0-report', 'truck-tracking']; // Admins see all\n            } else {\n                allowedSections = Array.isArray(claims.allowedSections)\n                                    ? claims.allowedSections as string[]\n                                    : []; // Default to empty array if claim doesn't exist or isn't an array\n            }\n\n\n            const appUser: User = {\n                ...firebaseUser,\n                role: userRole,\n                allowedSections: allowedSections,\n            };\n            setUser(appUser);\n\n        } catch (error) {\n            console.error(\"Error fetching custom claims:\", error);\n            // Handle error, maybe set user with default role/permissions?\n            const appUser: User = {\n                 ...firebaseUser,\n                 role: 'user', // Fallback role\n                 allowedSections: [], // Fallback permissions\n            };\n             setUser(appUser);\n        }\n\n\n      } else {\n        // User is signed out\n        setUser(null);\n      }\n      setLoading(false); // Set loading to false once auth state is determined\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // Logout function\n  const logout = async () => {\n    // Check if auth is available before trying to sign out\n     if (!auth) {\n       console.error(\"Cannot logout: Firebase auth is not initialized.\");\n       return; // Prevent attempting sign out if auth is null\n     }\n    setLoading(true); // Optionally set loading state during logout\n    try {\n      await signOut(auth);\n      setUser(null); // Clear user state immediately\n    } catch (error) {\n      console.error(\"Error signing out: \", error);\n      // Handle logout errors if necessary\n    } finally {\n      setLoading(false); // Ensure loading is false after attempt\n    }\n  };\n\n  // Value object passed to the provider\n  const value: AuthContextType = { user, loading, logout };\n\n  // Correcting the return statement to ensure proper JSX syntax\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n\n// Custom hook to use the auth context\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    // Ensure the hook is used within an AuthProvider\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Default admin credentials (example only - DO NOT USE IN PRODUCTION)\nexport const defaultAdmin = {\n    email: \"j.abbay@admin.com\", // Example admin email\n    // NEVER store plain text passwords in code.\n    // This is only for demonstration if manually creating the user.\n    // password: \"123456\"\n};\n"],"names":[],"mappings":"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","debugId":null}}]
}